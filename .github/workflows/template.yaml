name: Unity Test Template 

on: push

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  checkLicense:
    name: Check for the Unity license ‚òëÔ∏è
    runs-on: ubuntu-latest
    steps:
      - name: Fail - No license ‚ò†Ô∏è
        if: ${{ !startsWith(env.UNITY_LICENSE, '<') }}
        run: exit 1

  # testRunner:
  #  needs: checkLicense
  #  name: Test all modes üìù
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v2

  #    - name: Create LFS file list
  #      run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

  #    - name: Restore LFS cache
  #      uses: actions/cache@v2
  #      id: lfs-cache
  #      with:
  #        path: .git/lfs
  #        key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

  #    - name: Git LFS Pull
  #      run: |
  #        git lfs pull
  #        git add .
  #        git reset --hard

  #    - name: Restore Library cache
  #      uses: actions/cache@v2
  #      with:
  #        path: Library
  #        key: Library-test-project
  #        restore-keys: |
  #          Library-test-project-
  #          Library-

  #    - uses: webbertakken/unity-test-runner@v2
  #      id: testRunner
  #      with:
  #        testMode: all

  #    - uses: actions/upload-artifact@v2
  #      with:
  #        name: Test results (all modes)
  #        path: ${{ steps.testRunner.outputs.artifactsPath }}

  buildWebGL:
   needs: checkLicense
   name: Build for WebGL üñ•Ô∏è
   runs-on: ubuntu-latest
   strategy:
     fail-fast: false
     matrix:
        targetPlatform:
          # - StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          # - StandaloneWindows # Build a Windows standalone.
          # - StandaloneWindows64 # Build a Windows 64-bit standalone.
          # - StandaloneLinux64 # Build a Linux 64-bit standalone.
          # - iOS # Build an iOS player.
          # - Android # Build an Android .apk standalone app.
          - WebGL # WebGL.
   steps:
     - name: Checkout code
       uses: actions/checkout@v2

     - name: Create LFS file list
       run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

     - name: Restore LFS cache
       uses: actions/cache@v2
       id: lfs-cache
       with:
         path: .git/lfs
         key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

     - name: Git LFS Pull
       run: |
         git lfs pull
         git add .
         git reset --hard

     - name: Restore Library cache
       uses: actions/cache@v2
       with:
         path: Library
         key: Library-build-WebGL
         restore-keys: |
           Library-build-
           Library-

     - uses: webbertakken/unity-builder@v2
       with:
         targetPlatform: WebGL
         allowDirtyBuild: true

     - uses: actions/upload-artifact@v2
       with:
         name: build-WebGL
         path: build/WebGL

  # buildWindows:
  #  needs: checkLicense
  #  name: Build for Windows üñ•Ô∏è
  #  runs-on: ubuntu-latest
  #  strategy:
  #    fail-fast: false
  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v2

  #    - name: Create LFS file list
  #      run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

  #    - name: Restore LFS cache
  #      uses: actions/cache@v2
  #      id: lfs-cache
  #      with:
  #        path: .git/lfs
  #        key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

  #    - name: Git LFS Pull
  #      run: |
  #        git lfs pull
  #        git add .
  #        git reset --hard

  #    - name: Restore Library cache
  #      uses: actions/cache@v2
  #      with:
  #        path: Library
  #        key: Library-build-StandaloneWindows64
  #        restore-keys: |
  #          Library-build-
  #          Library-

  #    - uses: webbertakken/unity-builder@v2
  #      with:
  #        targetPlatform: StandaloneWindows64

  #    - uses: actions/upload-artifact@v2
  #      with:
  #        name: build-StandaloneWindows64
  #        path: build/StandaloneWindows64

  buildAndroid:
   needs: checkLicense
   name: Build for Android üì±
   runs-on: ubuntu-latest
   strategy:
     fail-fast: false
     matrix:
        targetPlatform:
          # - StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          # - StandaloneWindows # Build a Windows standalone.
          # - StandaloneWindows64 # Build a Windows 64-bit standalone.
          # - StandaloneLinux64 # Build a Linux 64-bit standalone.
          # - iOS # Build an iOS player.
          - Android # Build an Android .apk standalone app.
          # - WebGL # WebGL.
   steps:
     - name: Checkout code
       uses: actions/checkout@v2

     - name: Create LFS file list
       run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

     - name: Restore LFS cache
       uses: actions/cache@v2
       id: lfs-cache
       with:
         path: .git/lfs
         key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

     - name: Git LFS Pull
       run: |
         git lfs pull
         git add .
         git reset --hard

     - name: Restore Library cache
       uses: actions/cache@v2
       with:
         path: Library
         key: Library-build-Android
         restore-keys: |
           Library-build-
           Library-

     - uses: webbertakken/unity-builder@v2
       with:
         targetPlatform: Android
         allowDirtyBuild: true 
     - uses: actions/upload-artifact@v2
       with:
         name: build-Android
         path: build/Android


  deployPages:
   needs: buildWebGL
   name: Deploy to Github Pages üöÄ
   runs-on: ubuntu-latest
   steps:
     - name: Checkout code
       uses: actions/checkout@v2

     - uses: actions/download-artifact@v2
       with:
         name: build-WebGL
         path: build

     - name: Display structure of root files
       run: ls -R
       working-directory: build/WebGL

     - name: Deploy üöÄ
       uses: JamesIves/github-pages-deploy-action@4.1.4
       with:
         branch: gh-pages
         folder: build/WebGL
